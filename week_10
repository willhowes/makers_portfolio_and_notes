
# Weeks 10
[Week outline](https://github.com/makersacademy/course/tree/master/individual_challenges)

## Week's Goals

* Can you solve a challenging technical problem by writing well crafted code?
By "well crafted code", we mean code that is well tested, easy to read and easy to change.

### Have I achieved the above goals?

* Yes, in my team throughout the week, we used high-quality process to build our ['Acebook' project](https://github.com/Kaymo1990/acebook---CharliesAngels).

## Own Goals for the Week

1. Have a my process reviewed
a) With an official process review
b) By recording my screen and sending to a coach

2. Complete 2 tech tests
- Start by trying to solve the problem
- Then look at the form
- Then approve the code and repeat until you happy with the code quality. 


## Takeaways & Notes

### Week kick off
* Feedback loop:
- Receive F'back - reflect/plan - improvement

* Why is process important
- help solve any problem
- employers look at this
- repeatable toolset
- approach to solving a problem

* Processes:
- TDD
- Debugging
- Self-led learning
- Pairing
- Working in teams (agile, communication)
- Refacting
- Modelling (inc. Domain Modelling)
- Organising work (inc. Version Control)
- Problem solving (which uses some of the above)

* Code Quality
- DRY
- SRP
- Readable
- Maintainable
- Test coverage
- Dependancy injection as a tool for decoupling

- Quality (in engineering) means solving user needs

- Why do you write code?
1. To solve user needs - does it work?
2. For your team/other developers - is it readable, understandable, maintainable?

* Naming conventions
- descriptive
- variable names should describe what data it holds. Should come from the domain (i.e. what we are trying to work with, the topic).

* Comments 
- Should not say HOW the code works.
- instead of comments, properly named variables, etc should do this for you. 
- However, a comment say WHY the code was done a certain way is a valid comment. 

* Testing your code quality:
- Get someone else to read it. Maybe someone less experiences (in the junior cohort).
- Is the code easy to change?
- Can I easily add a feature. If I have to add a feature, how much of the code do I need to change?










